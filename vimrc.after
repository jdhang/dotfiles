" color scheme
set background=dark
syntax on
color onedark

" make ie obvious where 80 char is
set textwidth=80
set colorcolumn=+1

" set line highlighting
set cursorline

" relative numbering
set relativenumber

" configure syntastic checking
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
" let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_checkers = ['standard']

" ctrl p config
let g:ctrlp_match_window = 'top,order:btt,min:1,max:10,results:10'

" switch between two last files
" nnoremap <leader><leader> <c-^>

" markdown files
let g:vim_markdown_folding_disabled = 1
" let g:markdown_fenced_languages = ['js=javascript','javascript','json=javascript','ruby','html','css','sass']

" SuperTab settings
" let g:SuperTabDefaultCompletionType = "context"

" javascript files
" au BufNewFile,BufFilePre,BufRead *.{jsx,javascript,es,es6,js} set filetype=javascript
let g:used_javascript_libs = 'jquery,underscore,backbone,react,flux'
let g:javascript_enable_domhtmlcss=1
let g:jsx_ext_required = 0

" vim-javascript settings
let g:javascript_enable_domhtmlcss=1

" vim-jsx settings
let g:jsx_ext_required = 0

" vim-indent-guides settings
" let g:indent_guides_guide_size = 1

" vim-closetag
let g:closetag_filenames = "*.xml,*.html,*.xhtml,*.phtml,*.php"
au FileType xml,html,phtml,php,xhtml,js let b:delimitMate_matchpairs = "(:),[:],{:}"

" vim-jsbeautify
map <C-F> :call JsBeautify()<CR>

" YouCompleteMe settings
let g:ycm_register_as_syntastic_checker = 0
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview

" ultisnips settings to work with YCM

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
" alternative
" let g:ycm_key_list_select_completion = ['<C-TAB>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-S-TAB>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<C-TAB>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"

" NERDCommenter, add space after each comment
let g:NERDSpaceDelims = 1

" better split window feel
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" personal remaps
command! Q q
command! Qall qall
" map <Leader>w <C-w>w
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
map <C-t> <esc>:tabnew<CR>
map <Leader>e :e <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>
map <Leader>sp :split<CR>
map <Leader>vp :vsplit<CR>
map <Leader>d :Dash 
map <Leader>ss :set syntax=

" Buffer management
map <Leader>bd :bd<CR>
map <Leader>bn :bnext<CR>
map <Leader>bv :bprevious<CR>

" stop using arrow keys
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
